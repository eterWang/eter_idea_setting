<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1693125769157" />
  </component>
  <component name="Translation.Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20221107001439946" />
      </app-key>
    </option>
    <option name="primaryLanguage" value="CHINESE" />
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translator" value="BAIDU" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogHeight" value="260" />
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="928" />
    <option name="newTranslationDialogY" value="366" />
    <histories>
      <item value="radix" />
      <item value="16进制" />
      <item value="Sync" />
      <item value="Aync" />
      <item value="实物" />
      <item value="width" />
      <item value="with" />
      <item value="策略" />
      <item value="transient" />
      <item value="Abstract Queued Synchronizer" />
      <item value="Biz Scenario" />
      <item value="struc" />
      <item value="gradually" />
      <item value="The core ablility should be implemented in Domain. or sink to Domian gradually" />
      <item value=" vulnerable" />
      <item value="Provides transitive vulnerable" />
      <item value="Ascent" />
      <item value="graphics" />
      <item value="transparent" />
      <item value="composite" />
      <item value="spread" />
      <item value="mutex" />
      <item value="access" />
      <item value="access-order" />
      <item value="insertion-order" />
      <item value="purpose" />
      <item value="Machinet.net - AI assistant and productivity tool for developers Machinet AI provides: AI Chat with GPT models. It is context-aware, natively built, and secure. It does not require your API keys. You can use it for code generation, troubleshooting, editing, documentation search, etc. Unit Test AI Agent for Java and Kotlin code using JUnit5 or 4 and Mockito. The AI decides how many tests to generate and what they should be testing, then it writes the entire unit test file or adds necessary tests to your existing one. GPT models are GPT-4, GPT-3.5 16k, etc. However, there's no guarantee that the code will compile, and errors may occur. Consider the AI Agent as a helper tool for generating intelligent unit test templates. Find us here: Machinet is evolving, and we are eager to hear from our users. If you have any suggestions, feedback, or face some issues – don't hesitate to share them with us: Discord Slack Youtube Twitter JetBrains Marketplace reviews Machinet.net Free Machinet is available for free. For paid and enterprise tiers, please visit machinet.net. Security and Privacy: Machinet does not use your source code for training. Machinet does not store your code. Machinet transfers only the snippets of code required to generate the result. SSL encryption during transit. All third-party vendors are secure and thoroughly vetted. We use OpenAI to provide the service. OpenAI does not use your source code for training. OpenAI retains the data for 30 days for misuse monitoring only. OpenAI is SOC2, GDPR, and CCPA compliant. For further information, please visit machinet.net or discord. How to use it: To use AI Chat: Use quot;Machinet AIquot; item in the quot;Toolsquot; action menu or simply use quot;Shift + Alt + Equot; combination to show the chat dialog. Type anything and wait for the response of the AI. You can ask it to create modify files, ask questions, and many more. To add unit tests: Click the blue arrow near the method name. The unit tests will appear in the test file. Notification in the bottom-right corner will help you navigate to the test file. You can also select a method and use the keyboard shortcut (Shift + Alt + D by default) To re-generate unit test: Navigate to the test file Click the quot;re-generatequot; blue icon near the method name To add imports: Click the “im” icon near the package declaration. It will not overwrite the imports you’ve already had. Features: Context-aware and easy-to-use AI Chat with GPT-4, GPT-3.5 16K. Unit Test AI Agent. Writes unit test files to cover your method. If you already have a test class and fields, the plugin will use them to construct tests. Otherwise, it will generate a test class for you. Import generation. The plugin will write imports for a given file. It will not overwrite the imports you’ve already had. Max tests count. You can limit the number of generated unit tests in the plugin settings. Use the Junit version switcher in settings to request a version you need. Native AI Chat window. It can be a stand-alone window or be pinned to the IDE from the both sides. Supported IDEs and Languages: AI Chat supports all JetBrains’ IDEs and languages. Unit Test AI Agent is available for Java and Kotlin. Prerequisites: AI chat has no prerequisites Unit Test AI Agent works better with Java 8+, Kotlin 1.7+ and it uses JUnit5 and Mockito by default." />
      <item value="collision" />
      <item value="Simulate" />
      <item value="美人鱼" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="22" />
        <entry key="ENGLISH" value="23" />
        <entry key="FRENCH" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="TURKISH" value="1" />
      </map>
    </option>
  </component>
</application>